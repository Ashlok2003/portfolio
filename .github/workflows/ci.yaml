name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
  NODE_ENV: test
  CI: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.hash.outputs.hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate cache key
        id: hash
        run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  lint-and-typecheck:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .next/cache
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}-${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Run ESLint
        run: npm run lint -- --max-warnings=0

      - name: TypeScript type-check
        run: npx tsc --noEmit --skipLibCheck

  test:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .next/cache
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}-${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Run Tests with coverage
        run: npm run test:coverage -- --ci --coverage --maxWorkers=4

      - name: Upload coverage report
        uses: codecov/codecov-action@v3

  build:
    needs: [lint-and-typecheck, test]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .next/cache
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}-${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Build
        run: npm run build
        env:
          NODE_ENV: production
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

  sonarcloud:
    needs: [lint-and-typecheck, test]
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for SonarCloud analysis

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .next/cache
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}-${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

  notify:
    needs: [build, sonarcloud]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify status
        run: |
          if [[ "${{ needs.build.result }}" == "success" && "${{ needs.sonarcloud.result }}" == "success" ]]; then
            echo "üéâ CI pipeline finished successfully!"
          else
            echo "‚ùå CI pipeline failed!"
            exit 1
          fi
